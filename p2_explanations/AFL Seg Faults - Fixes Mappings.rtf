{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 \ul \ulc0 AFL Server Authentication\
Apurva Bhogale\ulnone \

\fs24 Seg Faults-Fixes Mappings\
\

\b0 Crash 1: Seg Fault 1\
\
The input file seg faulted in marshall because a memcpy was unaligned, which makes sense because the input provided misspelled struct. My objB struct instance gets filled if the word \'93struct\'94 is found, and since it was never found it seg faults. I fixed it by 
\b adding an assert in upload A, B and C that if the first token is not the word field, then it should definitely be struct. 
\b0 \
\
Crash 2: Seg Fault 2\
\
The input file seg faulted in uploadB at a strlen because there is an undefined character in there. As such I 
\b added an assert to ensure that the obj_id is an integer if the token is a struct, and to ensure that the length of the obj_id is 1. \

\b0 \
Crash 3: Seg Fault 3\
\
The input file seg faulted in uploadB because it reaches a new line since it has not broken out of the loop, since the correct number of fields haven\'92t been hit, since the number is only incremented if the first value is field. 
\b I added an assert to make sure the first token after finding \'93struct X 3\'94 is the word field.
\b0 \
\
Crash 4: Seg Fault 4\
\
This time the input file fails because again the if for \'93string_a\'94 is not hit in upload b so nothing gets filled in the objB struct B instance. I 
\b added an assert to ensure that for every upload, the second token when looping through the lines after finding the Struct X 3 line, is one of the required fields in the structure.
\b0 \
\
Crash 5: Seg Fault 5\
\
This time it 
\b catches the assert from Crash 1 in upload_B,
\b0  so crash1 fix fixed this crash\'92s problem. This is because once my uploads get the necessary info from their desired struct, they keep looping through till the file ends. So, in that overarching loop, the assert is caught before upload_C even gets called, as the issue is in the struct C but gets caught in B.\
\
Crash 6: Seg Fault 6\
\
This time it catches the
\b  assertion from the fix in crash 4. 
\b0 It is the same issue where one of the field names is misspelled but this time for struct c.\
\
\
Crash 7: Seg Fault 7\
\
This time it breaks because an invalid value is being stored as a number so the marshall gets confused. I added 
\b an assert that checks the value field is a number looking for a num_x when filling the structs,
\b0  and if it\'92s not the number 0, since atoi returns 0 if unparsable to an int.\
\
Crash 8: Seg Fault 8\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 This time it catches the
\b  assert from Crash 1 in upload_B
\b0 , so crash1 fix fixed this crash\'92s problem. This is because once my uploads get the necessary info from their desired struct, they keep looping through till the file ends. So, in that overarching loop, the assert is caught before upload_C even gets called, as the issue is in the struct C but gets caught in B.\
\
Crash 9: Seg Fault 9\
\
This time it 
\b catches the assert from Crash 7
\b0  in upload_C. The num_e in struct C given in the input file is not valid and the assert checks for validity of numbers. \
\
Crash 10: Seg Fault 10\
\
This time it 
\b catches the assert from Crash 7
\b0  in upload_B. The num_b in struct C given in the input file is not valid and the assert checks for validity of numbers. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
}